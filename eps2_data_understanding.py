# -*- coding: utf-8 -*-
"""Eps2 - Data Understanding

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t4cSh-ZT4urCfRnKhhkJFgPonRLGBEhm

# **Eps2 - Data Understanding**

# 1. Load Data dan Library

a. Import Library dan Load Dataset
"""

import pandas as pd
from pandas.plotting import scatter_matrix
pd.set_option('display.width', 500)
pd.set_option('display.max_columns', 100)
pd.set_option('display.notebook_repr_html', True)

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/DATA MINING/Eps2-Data-train.csv')

"""B. Cek isi dataset."""

data.head()

"""# 2. Dokumentasi Tipe Data

a. Cek jumlah data
"""

data = pd.DataFrame(data)
print(data.shape)

"""b. Cek tipe data"""

print(data.dtypes)

data.info()

"""c. Cek tipe data pada salah satu variabel/atribut"""

print(data['Age'].dtypes)

print(data[['Age', 'Name', 'Sex']].dtypes)

"""# **3. Exploratory Data Analysis (EDA)**

a. Pendekatan statistik sederhana
"""

data.describe()

"""b. Pendekatan visual

b.i. Distribusi data pada suatu variabel/atribut
"""

data['Survived'].value_counts().plot(kind='bar')
data['Survived'].value_counts()

"""b.ii. Perbandingan antar variabel/atribut"""

def survival_stacked_bar(data, variable):
    died = data[data['Survived'] == 0][variable].value_counts() / len(data[data['Survived'] == 0])
    survived = data[data['Survived'] == 1][variable].value_counts() / len(data[data['Survived'] == 1])
    dataset = pd.DataFrame([died, survived])
    dataset.index = ['Meninggal', 'Selamat']
    dataset.plot(kind='bar', stacked=True, title='Prosentase')

    return dataset.head()

"""1. Stacked bar untuk menampilkan survival status berdasarkan `sex`"""

survival_stacked_bar(data, 'Sex')

"""2. Stacked bar untuk menampilkan survival status berdasarkan `pClass`"""

survival_stacked_bar(data, 'Pclass')

"""3. Stacked bar untuk menampilkan survival status berdasarkan `Embarked`"""

survival_stacked_bar(data, 'Embarked')

"""4. Stacked bar untuk menampilkan survival status berdasarkan `ageGroup`"""

def survival_stacked_bar(data, variable):
    bins = [0, 12, 18, 60, 100]
    labels = ['Anak-anak', 'Remaja', 'Dewasa', 'Lansia']
    if variable == 'Age':
        data['AgeGroup'] = pd.cut(data['Age'], bins=bins, labels=labels)
        variable = 'AgeGroup'
    died = data[data['Survived'] == 0][variable].value_counts(normalize=True)
    survived = data[data['Survived'] == 1][variable].value_counts(normalize=True)
    dataset = pd.DataFrame([died, survived])
    dataset.index = ['Meninggal', 'Selamat']
    dataset.plot(kind='bar', stacked=True, title='Prosentase berdasarkan {}'.format(variable))
    return dataset.head()
survival_stacked_bar(data, 'Age')

"""# **4. Data Cleansing**

a. Data perlu dicek apakah terdapat data yang kosong atau tidak.
"""

data.isnull().sum()

"""b. (opsional) Menunjukan berapa persen data yang hilang dari setiap row"""

# data.isnull().mean() * 100
missing_percentage = data.isnull().mean() * 100
missing_percentage = missing_percentage.apply(lambda x: '{:.2f}%'.format(x))
print(missing_percentage)

"""c. (opsional)Nullity Matrix untuk menampilkan data null

"""

import missingno as msno
 msno.matrix(data)

"""d. Menghapus kolom `Cabin`"""

data = data.drop(['Cabin'], axis=1)

"""e. Mengisi data (impute) `Age` menggunakan mean"""

mean_age = data['Age'].mean()
data['Age'] = data['Age'].fillna(mean_age)

"""f. Mengisi data `Embarked` menggunakan modus"""

mode_embarked = data['Embarked'].mode()[0]
data['Embarked'] = data['Embarked'].fillna(mode_embarked)

"""g. Mengecek data null setelah di cleaning"""

data.isnull().sum()

"""h. Export data cleaning"""

from google.colab import files

data.to_csv('data_train_cleaned.csv')

files.download('data_train_cleaned.csv')